name: Deployment

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  ARTIFACT_REPO_NAME: ${{ secrets.GCP_ARTIFACT_REPO_NAME }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }} 
  REGION: asia-northeast3
  CUSTOM_IMAGE: nabee
  JOB_IMAGE: nabee-job
  STATIC_IP_NAME: nabee-static-ip
  INSTANCE_NAME: nabee-instance 
  MACHINE_TYPE: e2-standard-2
  IMAGE_FAMILY: ubuntu-2204-lts
  IMAGE_PROJECT: ubuntu-os-cloud
  IMAGE_VERSION: latest
  SERVICE_PORT: 8501

jobs:
  build-to-artifact-repository:
    runs-on: ubuntu-latest
    # if: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -q -r requirements.txt

      - name: Set Environment File
        run: |
         echo "${{ secrets.NABEE_ENV }}" > .env
       
      # - name: Get short SHA
      #   id: slug
      #   run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Build and push Docker image to Artifact Registry
        run: |
          gcloud auth configure-docker "${REGION}-docker.pkg.dev"
          docker build -t "${REGION}-docker.pkg.dev/${PROJECT_ID}/${ARTIFACT_REPO_NAME}/${CUSTOM_IMAGE}:${IMAGE_VERSION}" .
          docker push "${REGION}-docker.pkg.dev/${PROJECT_ID}/${ARTIFACT_REPO_NAME}/${CUSTOM_IMAGE}:${IMAGE_VERSION}"


  create-resources-deploy:
    runs-on: ubuntu-latest
    needs: build-to-artifact-repository
    # if: false     
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Fetch Static IP Address
        id: static-ip
        run: |
          IP=$(gcloud compute addresses describe ${{ env.STATIC_IP_NAME }} --region ${{ env.REGION }} --format='value(address)' 2>/dev/null || true)
          if [ -z "$IP" ]; then
            gcloud compute addresses create ${{ env.STATIC_IP_NAME }} --region ${{ env.REGION }}
            IP=$(gcloud compute addresses describe ${{ env.STATIC_IP_NAME }} --region ${{ env.REGION }} --format='value(address)')
          fi
          echo "STATIC_IP=$IP" >> $GITHUB_OUTPUT

      - name: Create Firewall Rule for Streamlit
        run: |
          RULE_NAME="streamlit"
          # 전역 리소스이므로 --region 옵션 없이 조회
          FIREWALL_RULE=$(gcloud compute firewall-rules describe "$RULE_NAME" 2>/dev/null || true)
          if [ -z "$FIREWALL_RULE" ]; then
            gcloud compute firewall-rules create "$RULE_NAME" \
              --direction=INGRESS \
              --priority=1000 \
              --network=default \
              --action=allow \
              --rules=tcp:${{ env.SERVICE_PORT }} \
              --source-ranges=0.0.0.0/0
            FIREWALL_RULE="created"  # 필요에 따라 단순 메시지 처리
          else
            FIREWALL_RULE="exists"
          fi
          # 출력 값에 개행이나 YAML 문법이 없도록 간단한 문자열로 작성
          echo "FIREWALL_RULE=$FIREWALL_RULE" >> $GITHUB_OUTPUT
        shell: bash

      - name: Check if Instance Exists and Recreate/Create with Ubuntu (Standard Auth)
        id: instance
        run: |
          set -e # 스크립트 오류 시 즉시 중단

          # --- (선택 사항: 기존 인스턴스 삭제 로직 - 이전과 동일) ---
          echo "Checking if instance $INSTANCE_NAME exists..."
          if gcloud compute instances describe "${INSTANCE_NAME}" --zone="${REGION}-b" &>/dev/null; then
            echo "Instance $INSTANCE_NAME already exists."
          else
            echo "Instance $INSTANCE_NAME does not exist. Creating..."
            echo "Generating Ubuntu startup script (startup.sh) for standard auth..."

            # --- Ubuntu VM에서 실행될 startup.sh 스크립트 내용 생성 시작 ---
            echo "#!/bin/bash" > startup.sh
            echo "set -e" >> startup.sh
            echo "export DEBIAN_FRONTEND=noninteractive" >> startup.sh # apt-get non-interactive 모드

            # 필수 패키지 설치 (Docker, gcloud CLI)
            echo "echo 'Updating packages and installing Docker and Google Cloud CLI...'" >> startup.sh
            echo "apt-get update -y" >> startup.sh
            echo "apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release docker.io" >> startup.sh

            # Google Cloud CLI 저장소 추가 (최신 방식)
            echo "echo 'Adding Google Cloud CLI repository...'" >> startup.sh
            echo "curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/trusted.gpg.d/google-cloud-cli.gpg" >> startup.sh
            echo "echo \"deb [signed-by=/etc/apt/trusted.gpg.d/google-cloud-cli.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list" >> startup.sh
            echo "echo 'Updating packages again after adding Google Cloud CLI repository...'" >> startup.sh
            echo "apt-get update -y" >> startup.sh
            echo "echo 'Installing Google Cloud CLI...'" >> startup.sh
            echo "apt-get install -y google-cloud-cli" >> startup.sh

            # Docker 서비스 활성화 및 시작
            echo "echo 'Ensuring Docker service is active...'" >> startup.sh
            echo "systemctl enable docker" >> startup.sh
            echo "systemctl start docker" >> startup.sh

            # <<< 핵심: gcloud 를 이용한 Docker 인증 구성 >>>
            echo "echo 'Configuring Docker for Artifact Registry using gcloud...'" >> startup.sh
            # VM의 서비스 계정을 사용하여 자동으로 인증 구성
            echo "gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet" >> startup.sh
            echo "echo 'Docker configured successfully.'" >> startup.sh

            # Docker 이미지 Pull 및 Run (워크플로우 변수 사용)
            IMAGE_PATH="${REGION}-docker.pkg.dev/${PROJECT_ID}/${ARTIFACT_REPO_NAME}/${CUSTOM_IMAGE}:${IMAGE_VERSION}"
            echo "echo 'Pulling Docker image: $IMAGE_PATH'" >> startup.sh
            # Ubuntu에서는 sudo 필요
            echo "sudo docker pull \"$IMAGE_PATH\"" >> startup.sh
            echo "echo 'Image pulled successfully.'" >> startup.sh

            echo "echo 'Running Docker container...'" >> startup.sh
            echo "sudo docker run -d -p ${{ env.SERVICE_PORT }}:${{ env.SERVICE_PORT }} --name ${CUSTOM_IMAGE} \"$IMAGE_PATH\"" >> startup.sh
            echo "echo 'Container started.'" >> startup.sh
            # --- Ubuntu VM에서 실행될 startup.sh 스크립트 내용 생성 끝 ---
            # 생성된 startup.sh 파일을 실행 가능하게 만듦 (Runner에서)
            chmod +x startup.sh

            echo "Creating/Recreating GCE instance $INSTANCE_NAME with Ubuntu..."
            # gcloud 명령어로 인스턴스 생성 (Ubuntu 이미지 및 올바른 옵션, startup.sh 전달)
            gcloud compute instances create "$INSTANCE_NAME" \
              --zone="${REGION}-b" \
              --machine-type="${MACHINE_TYPE}" \
              --image-family="${IMAGE_FAMILY}" \
              --image-project="${IMAGE_PROJECT}" \
              --boot-disk-size=20GB \
              --address="${{ steps.static-ip.outputs.STATIC_IP }}" \
              --service-account="${GCP_SERVICE_ACCOUNT}" \
              --scopes="https://www.googleapis.com/auth/cloud-platform" \
              --metadata-from-file startup-script=startup.sh

            echo "Instance $INSTANCE_NAME created/recreated successfully."
            echo "instance_name=$INSTANCE_NAME" >> $GITHUB_OUTPUT

            sleep 333
          fi
          
      - name: Verify Instance Creation
        run: |
          gcloud compute instances describe $INSTANCE_NAME --zone "${REGION}-b"
        

  deploy:
    runs-on: ubuntu-latest
    needs: create-resources-deploy
    # needs: build-to-artifact-repository
    # if: false     
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to VM using gcloud compute ssh
        run: |
          gcloud compute ssh --zone="${{ env.REGION }}-b" --project=${{ env.PROJECT_ID }} ${{ env.INSTANCE_NAME }} \
          --command="
            sudo docker stop ${{ env.CUSTOM_IMAGE }}  || true && 
            sudo docker rm -f ${{ env.CUSTOM_IMAGE }}  || true && 
            sudo docker rmi -f ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO_NAME }}/${{ env.CUSTOM_IMAGE}}:${{ env.IMAGE_VERSION}} || true && 
            sudo docker pull ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO_NAME }}/${{ env.CUSTOM_IMAGE}}:${{ env.IMAGE_VERSION}} && 
            sudo docker run -d -p ${{ env.SERVICE_PORT }}:${{ env.SERVICE_PORT }} --name ${{ env.CUSTOM_IMAGE }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO_NAME }}/${{ env.CUSTOM_IMAGE}}:${{ env.IMAGE_VERSION}}" --quiet